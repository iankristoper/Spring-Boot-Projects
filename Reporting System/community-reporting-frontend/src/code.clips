//this is for sign up - pop up box window

import React, { useState } from "react";
import {
  Container,
  TextField,
  Button,
  Typography,
  Box,
  Paper,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert
} from "@mui/material";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export default function Signup() {
  const [form, setForm] = useState({
    username: "",
    email: "",
    password: "",
    city: ""
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [loading, setLoading] = useState(false);
  const [openPopup, setOpenPopup] = useState(false);

  const navigate = useNavigate();

  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setLoading(true);

    try {
      const response = await axios.post(
        "http://localhost:8080/api/auth/signup",
        form
      );
      console.log("‚úÖ Signup Success:", response.data);

      setSuccess("Account created successfully! You can now log in.");
      setOpenPopup(true);

      // clear form
      setForm({ username: "", email: "", password: "", city: "" });
    } catch (err) {
      console.error("‚ùå Signup Failed:", err);
      setError(err.response?.data?.message || "Something went wrong. Try again.");
      setOpenPopup(true);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 10 }}>
      <Paper sx={{ p: 4, borderRadius: "16px", bgcolor: "background.paper" }}>
        {/* üî• Updated heading style */}
        <Typography
          variant="h5"
          gutterBottom
          sx={{ mb: 2, fontWeight: "bold", textAlign: "center", color: "primary.main" }}
        >
          Sign Up
        </Typography>

        <Box component="form" onSubmit={handleSubmit}>
          <TextField
            fullWidth
            margin="normal"
            label="Username"
            name="username"
            value={form.username}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Email"
            name="email"
            value={form.email}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Password"
            type="password"
            name="password"
            value={form.password}
            onChange={handleChange}
          />

          {/* City selection */}
          <FormControl fullWidth margin="normal">
            <InputLabel>City</InputLabel>
            <Select
              name="city"
              value={form.city}
              onChange={handleChange}
              label="City"
            >
              <MenuItem value="Cebu City">Cebu City</MenuItem>
              <MenuItem value="Mandaue City">Mandaue City</MenuItem>
              <MenuItem value="Lapu-Lapu City">Lapu-Lapu City</MenuItem>
            </Select>
          </FormControl>

          <Button
            fullWidth
            type="submit"
            variant="contained"
            sx={{ mt: 2, borderRadius: "12px", fontWeight: "bold" }}
            disabled={loading}
          >
            {loading ? "Signing up..." : "Sign Up"}
          </Button>
        </Box>
      </Paper>

      {/* ‚úÖ Popup Dialog */}
      <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>
        <DialogTitle>{success ? "‚úÖ Success" : "‚ùå Error"}</DialogTitle>
        <DialogContent>
          {success ? (
            <Alert severity="success">{success}</Alert>
          ) : (
            <Alert severity="error">{error}</Alert>
          )}
        </DialogContent>
        <DialogActions>
          {success ? (
            <Button
              onClick={() => {
                setOpenPopup(false);
                navigate("/login"); // redirect to login
              }}
              color="primary"
              variant="contained"
            >
              Go to Login
            </Button>
          ) : (
            <Button onClick={() => setOpenPopup(false)} color="error">
              Close
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </Container>
  );
}

==============================================================================
==============================================================================
//dashboard with out footer

import React from "react";
import { Container, Paper, Typography, Button, Box, Stack } from "@mui/material";
import DynamicFeedIcon from "@mui/icons-material/DynamicFeed";
import AssignmentTurnedInIcon from "@mui/icons-material/AssignmentTurnedIn";
import HistoryIcon from "@mui/icons-material/History";
import useSessionTimeout from "../hooks/useSessionTimeout";

export default function Dashboard() {
  useSessionTimeout(3600000); // 1 hour inactivity

  const cards = [
    {
      title: "Feed",
      desc: "Browse reports from the community.",
      icon: <DynamicFeedIcon sx={{ fontSize: 50, color: "yellow" }} />,
      button: "View Feed",
    },
    {
      title: "My Reports",
      desc: "Track and manage your submitted reports.",
      icon: <AssignmentTurnedInIcon sx={{ fontSize: 50, color: "yellow" }} />,
      button: "View Reports",
    },
    {
      title: "Report History",
      desc: "View past reports and resolutions.",
      icon: <HistoryIcon sx={{ fontSize: 50, color: "yellow" }} />,
      button: "View History",
    },
  ];

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Header */}
      <Paper
        elevation={3}
        sx={{
          p: { xs: 3, sm: 4 },
          borderRadius: "16px",
          bgcolor: "black",
          color: "white",
          textAlign: "center",
          wordWrap: "break-word",
        }}
      >
        <Typography
          variant="h4"
          fontWeight="bold"
          sx={{ color: "yellow", fontSize: { xs: "1.5rem", sm: "2rem" } }}
        >
          Reporting Dashboard
        </Typography>
        <Typography
          variant="body1"
          sx={{
            mt: { xs: 2, sm: 3 },
            fontWeight: "bold",
            fontSize: { xs: "0.9rem", sm: "1rem" },
          }}
        >
          Welcome back, User üëã
        </Typography>
      </Paper>

      {/* Action Cards using Stack for responsive wrapping */}
      <Stack
        direction={{ xs: "column", sm: "row" }}
        spacing={3}
        justifyContent="center"
        sx={{ mt: 2 }}
      >
        {cards.map((card, index) => (
          <Box
            key={index}
            sx={{
              flex: 1,
              minWidth: { xs: "280px", sm: "0" }, // ‚úÖ ensures mobile cards are equal
              maxWidth: { xs: "100%", sm: "320px" }, // consistent max width
              alignSelf: "stretch", // ‚úÖ ensures equal height
            }}
          >
            <Paper
              elevation={4}
              sx={{
                p: { xs: 3, sm: 4 },
                textAlign: "center",
                borderRadius: "16px",
                bgcolor: "background.paper",
                display: "flex",
                flexDirection: "column",
                justifyContent: "space-between",
                alignItems: "center",
                height: "100%",
                wordWrap: "break-word",
              }}
            >
              {card.icon}
              <Box sx={{ mt: 2, flexGrow: 1 }}>
                <Typography
                  variant="h6"
                  sx={{
                    fontWeight: "bold",
                    fontSize: { xs: "1rem", sm: "1.2rem" },
                  }}
                >
                  {card.title}
                </Typography>
                <Typography
                  variant="body2"
                  sx={{
                    mt: 1,
                    mb: 2,
                    fontSize: { xs: "0.85rem", sm: "0.95rem" },
                  }}
                >
                  {card.desc}
                </Typography>
              </Box>
              <Button
                variant="contained"
                sx={{
                  bgcolor: "black",
                  color: "yellow",
                  borderRadius: "12px",
                  textTransform: "none",
                  fontWeight: "bold",
                  py: 1,
                }}
                fullWidth
              >
                {card.button}
              </Button>
            </Paper>
          </Box>

          
        ))}
      </Stack>
      {/* Footer */}


    </Container>
    
  );
  
}



====================================================================

//this is the report form with responsive mobile design 
import React, { useState, useEffect } from "react";
import {
  Container,
  Paper,
  Typography,
  Button,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Card,
  CardContent,
  Stack,
  useMediaQuery,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import AddIcon from "@mui/icons-material/Add";
import axios from "axios";
import ReportForm from "./ReportForm";

export default function Reports() {
  const [reports, setReports] = useState([]);
  const [open, setOpen] = useState(false);
  const isMobile = useMediaQuery("(max-width:600px)");

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = () => {
    axios
      .get("http://localhost:8080/api/reports/my-reports")
      .then((res) => setReports(res.data))
      .catch((err) => console.error("Error fetching reports:", err));
  };

  const handleSubmit = (data) => {
    axios
      .post("http://localhost:8080/api/reports/create", data)
      .then((res) => setReports((prev) => [res.data, ...prev]))
      .catch((err) => console.error("Error creating report:", err));
  };

  const handleDelete = (id) => {
    axios
      .delete(`http://localhost:8080/api/reports/${id}`)
      .then(() => setReports(reports.filter((r) => r.id !== id)))
      .catch((err) => console.error("Delete failed:", err));
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Header */}
      <Paper
        elevation={3}
        sx={{
          p: { xs: 3, sm: 4 },
          borderRadius: "16px",
          bgcolor: "black",
          color: "white",
          textAlign: "center",
        }}
      >
        <Typography
          variant="h4"
          fontWeight="bold"
          sx={{ color: "yellow", mb: 2 }}
        >
          My Reports
        </Typography>
        <Typography variant="body1">
          Here you can view, edit, and delete your submitted reports.
        </Typography>
      </Paper>

      {/* Add New Report Button */}
      <Box sx={{ mt: 3, textAlign: "right" }}>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          sx={{
            bgcolor: "black",
            color: "yellow",
            borderRadius: "12px",
            "&:hover": { bgcolor: "yellow", color: "black" },
          }}
          onClick={() => setOpen(true)}
        >
          New Report
        </Button>
      </Box>

      {/* Popup Form */}
      <ReportForm
        open={open}
        handleClose={() => setOpen(false)}
        handleSubmit={handleSubmit}
      />

      {/* Reports List */}
      {isMobile ? (
        // üì± Mobile Card Layout
        <Box sx={{ mt: 3 }}>
          {reports.length > 0 ? (
            reports.map((report) => (
              <Card
                key={report.id}
                elevation={3}
                sx={{
                  mb: 2,
                  borderRadius: "12px",
                  bgcolor: "#111",
                  color: "white",
                  p: 1,
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    sx={{ color: "yellow", fontWeight: "bold" }}
                  >
                    {report.title}
                  </Typography>
                  <Typography variant="body2" sx={{ mt: 0.5 }}>
                    üè∑ Category: {report.category}
                  </Typography>
                  <Typography variant="body2">
                    üìÖ Date:{" "}
                    {new Date(report.dateCreated).toLocaleDateString()}
                  </Typography>
                  <Typography
                    variant="body2"
                    sx={{
                      mt: 0.5,
                      color:
                        report.status === "Resolved" ? "lightgreen" : "orange",
                    }}
                  >
                    ‚öô Status: {report.status || "Pending"}
                  </Typography>

                  {/* Actions */}
                  <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                    <IconButton
                      size="small"
                      color="primary"
                      sx={{
                        bgcolor: "rgba(255,255,0,0.1)",
                        "&:hover": { bgcolor: "yellow", color: "black" },
                      }}
                    >
                      <EditIcon fontSize="small" />
                    </IconButton>
                    <IconButton
                      size="small"
                      color="error"
                      onClick={() => handleDelete(report.id)}
                      sx={{
                        bgcolor: "rgba(255,0,0,0.1)",
                        "&:hover": { bgcolor: "red", color: "white" },
                      }}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Stack>
                </CardContent>
              </Card>
            ))
          ) : (
            <Typography align="center" sx={{ mt: 3, color: "text.secondary" }}>
              No reports found.
            </Typography>
          )}
        </Box>
      ) : (
        // üíª Desktop Table Layout
        <TableContainer component={Paper} sx={{ mt: 3 }}>
          <Table>
            <TableHead sx={{ bgcolor: "black" }}>
              <TableRow>
                {["Title", "Category", "Status", "Date Created", "Actions"].map(
                  (head) => (
                    <TableCell
                      key={head}
                      sx={{ color: "yellow", fontWeight: "bold" }}
                    >
                      {head}
                    </TableCell>
                  )
                )}
              </TableRow>
            </TableHead>
            <TableBody>
              {reports.length > 0 ? (
                reports.map((report) => (
                  <TableRow key={report.id}>
                    <TableCell>{report.title}</TableCell>
                    <TableCell>{report.category}</TableCell>
                    <TableCell>{report.status || "Pending"}</TableCell>
                    <TableCell>
                      {new Date(report.dateCreated).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <IconButton color="primary">
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        color="error"
                        onClick={() => handleDelete(report.id)}
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    No reports found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Container>
  );
}

===========================================================

//this is mobile design for reports 

 {/* Responsive Layout */}
      {isMobile ? (
        // üì± Collapsible Mobile Card Layout
        <Stack spacing={2} sx={{ mt: 3 }}>
          {reports.length > 0 ? (
            reports.map((report) => {
              const isExpanded = expandedId === report.id;
              return (
                <Card
                  key={report.id}
                  elevation={3}
                  sx={{
                    borderRadius: "14px",
                    bgcolor: "black",
                    color: "white",
                    border: "1px solid rgba(255, 255, 0, 0.3)",
                    boxShadow: "0 2px 6px rgba(0,0,0,0.4)",
                  }}
                >
                  <CardContent
                    sx={{
                      p: 2,
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                    onClick={() => toggleExpand(report.id)}
                  >
                    <Box>
                      <Typography
                        variant="subtitle1"
                        fontWeight="bold"
                        sx={{ color: "yellow" }}
                      >
                        {report.title}
                      </Typography>
                      <Typography
                        variant="body2"
                        sx={{
                          color:
                            report.status === "Resolved"
                              ? "#00e676"
                              : report.status === "Rejected"
                              ? "#ff5252"
                              : "orange",
                        }}
                      >
                        {report.status || "Pending"}
                      </Typography>
                    </Box>
                    <IconButton
                      sx={{ color: "yellow" }}
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation(); //Prevents double toggle
                        toggleExpand(report.id);
                      }}
                    >
                      {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    </IconButton>

                  </CardContent>

                  <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                    <CardContent sx={{ p: 2, pt: 0 }}>
                      <Typography variant="body2" sx={{ color: "#f0f0f0" }}>
                        üè∑Ô∏è <b>Category:</b> {report.category}
                      </Typography>
                      <Typography variant="body2" sx={{ color: "#f0f0f0" }}>
                        üìÖ <b>Date:</b>{" "}
                        {new Date(report.dateCreated).toLocaleDateString()}
                      </Typography>

                      <Box
                        sx={{
                          mt: 1.5,
                          display: "flex",
                          justifyContent: "flex-end",
                          gap: 1,
                        }}
                      >
                        <IconButton
                          size="small"
                          sx={{
                            color: "yellow",
                            bgcolor: "rgba(255,255,255,0.08)",
                            "&:hover": { bgcolor: "rgba(255,255,0,0.2)" },
                          }}
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                        <IconButton
                          size="small"
                          sx={{
                            color: "#ff5252",
                            bgcolor: "rgba(255,255,255,0.08)",
                            "&:hover": { bgcolor: "rgba(255,82,82,0.2)" },
                          }}
                          onClick={() => handleDelete(report.id)}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    </CardContent>
                  </Collapse>
                </Card>
              );
            })
          ) : (
            <Typography align="center" sx={{ mt: 2, color: "text.secondary" }}>
              No reports found.
            </Typography>
          )}
        </Stack>
      ) : (

