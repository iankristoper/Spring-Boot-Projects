//this is for sign up - pop up box window

import React, { useState } from "react";
import {
  Container,
  TextField,
  Button,
  Typography,
  Box,
  Paper,
  MenuItem,
  Select,
  InputLabel,
  FormControl,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Alert
} from "@mui/material";
import axios from "axios";
import { useNavigate } from "react-router-dom";

export default function Signup() {
  const [form, setForm] = useState({
    username: "",
    email: "",
    password: "",
    city: ""
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [loading, setLoading] = useState(false);
  const [openPopup, setOpenPopup] = useState(false);

  const navigate = useNavigate();

  const handleChange = (e) =>
    setForm({ ...form, [e.target.name]: e.target.value });

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setLoading(true);

    try {
      const response = await axios.post(
        "http://localhost:8080/api/auth/signup",
        form
      );
      console.log("‚úÖ Signup Success:", response.data);

      setSuccess("Account created successfully! You can now log in.");
      setOpenPopup(true);

      // clear form
      setForm({ username: "", email: "", password: "", city: "" });
    } catch (err) {
      console.error("‚ùå Signup Failed:", err);
      setError(err.response?.data?.message || "Something went wrong. Try again.");
      setOpenPopup(true);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 10 }}>
      <Paper sx={{ p: 4, borderRadius: "16px", bgcolor: "background.paper" }}>
        {/* üî• Updated heading style */}
        <Typography
          variant="h5"
          gutterBottom
          sx={{ mb: 2, fontWeight: "bold", textAlign: "center", color: "primary.main" }}
        >
          Sign Up
        </Typography>

        <Box component="form" onSubmit={handleSubmit}>
          <TextField
            fullWidth
            margin="normal"
            label="Username"
            name="username"
            value={form.username}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Email"
            name="email"
            value={form.email}
            onChange={handleChange}
          />
          <TextField
            fullWidth
            margin="normal"
            label="Password"
            type="password"
            name="password"
            value={form.password}
            onChange={handleChange}
          />

          {/* City selection */}
          <FormControl fullWidth margin="normal">
            <InputLabel>City</InputLabel>
            <Select
              name="city"
              value={form.city}
              onChange={handleChange}
              label="City"
            >
              <MenuItem value="Cebu City">Cebu City</MenuItem>
              <MenuItem value="Mandaue City">Mandaue City</MenuItem>
              <MenuItem value="Lapu-Lapu City">Lapu-Lapu City</MenuItem>
            </Select>
          </FormControl>

          <Button
            fullWidth
            type="submit"
            variant="contained"
            sx={{ mt: 2, borderRadius: "12px", fontWeight: "bold" }}
            disabled={loading}
          >
            {loading ? "Signing up..." : "Sign Up"}
          </Button>
        </Box>
      </Paper>

      {/* ‚úÖ Popup Dialog */}
      <Dialog open={openPopup} onClose={() => setOpenPopup(false)}>
        <DialogTitle>{success ? "‚úÖ Success" : "‚ùå Error"}</DialogTitle>
        <DialogContent>
          {success ? (
            <Alert severity="success">{success}</Alert>
          ) : (
            <Alert severity="error">{error}</Alert>
          )}
        </DialogContent>
        <DialogActions>
          {success ? (
            <Button
              onClick={() => {
                setOpenPopup(false);
                navigate("/login"); // redirect to login
              }}
              color="primary"
              variant="contained"
            >
              Go to Login
            </Button>
          ) : (
            <Button onClick={() => setOpenPopup(false)} color="error">
              Close
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </Container>
  );
}

==============================================================================
==============================================================================
//dashboard with out footer

import React from "react";
import { Container, Paper, Typography, Button, Box, Stack } from "@mui/material";
import DynamicFeedIcon from "@mui/icons-material/DynamicFeed";
import AssignmentTurnedInIcon from "@mui/icons-material/AssignmentTurnedIn";
import HistoryIcon from "@mui/icons-material/History";
import useSessionTimeout from "../hooks/useSessionTimeout";

export default function Dashboard() {
  useSessionTimeout(3600000); // 1 hour inactivity

  const cards = [
    {
      title: "Feed",
      desc: "Browse reports from the community.",
      icon: <DynamicFeedIcon sx={{ fontSize: 50, color: "yellow" }} />,
      button: "View Feed",
    },
    {
      title: "My Reports",
      desc: "Track and manage your submitted reports.",
      icon: <AssignmentTurnedInIcon sx={{ fontSize: 50, color: "yellow" }} />,
      button: "View Reports",
    },
    {
      title: "Report History",
      desc: "View past reports and resolutions.",
      icon: <HistoryIcon sx={{ fontSize: 50, color: "yellow" }} />,
      button: "View History",
    },
  ];

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Header */}
      <Paper
        elevation={3}
        sx={{
          p: { xs: 3, sm: 4 },
          borderRadius: "16px",
          bgcolor: "black",
          color: "white",
          textAlign: "center",
          wordWrap: "break-word",
        }}
      >
        <Typography
          variant="h4"
          fontWeight="bold"
          sx={{ color: "yellow", fontSize: { xs: "1.5rem", sm: "2rem" } }}
        >
          Reporting Dashboard
        </Typography>
        <Typography
          variant="body1"
          sx={{
            mt: { xs: 2, sm: 3 },
            fontWeight: "bold",
            fontSize: { xs: "0.9rem", sm: "1rem" },
          }}
        >
          Welcome back, User üëã
        </Typography>
      </Paper>

      {/* Action Cards using Stack for responsive wrapping */}
      <Stack
        direction={{ xs: "column", sm: "row" }}
        spacing={3}
        justifyContent="center"
        sx={{ mt: 2 }}
      >
        {cards.map((card, index) => (
          <Box
            key={index}
            sx={{
              flex: 1,
              minWidth: { xs: "280px", sm: "0" }, // ‚úÖ ensures mobile cards are equal
              maxWidth: { xs: "100%", sm: "320px" }, // consistent max width
              alignSelf: "stretch", // ‚úÖ ensures equal height
            }}
          >
            <Paper
              elevation={4}
              sx={{
                p: { xs: 3, sm: 4 },
                textAlign: "center",
                borderRadius: "16px",
                bgcolor: "background.paper",
                display: "flex",
                flexDirection: "column",
                justifyContent: "space-between",
                alignItems: "center",
                height: "100%",
                wordWrap: "break-word",
              }}
            >
              {card.icon}
              <Box sx={{ mt: 2, flexGrow: 1 }}>
                <Typography
                  variant="h6"
                  sx={{
                    fontWeight: "bold",
                    fontSize: { xs: "1rem", sm: "1.2rem" },
                  }}
                >
                  {card.title}
                </Typography>
                <Typography
                  variant="body2"
                  sx={{
                    mt: 1,
                    mb: 2,
                    fontSize: { xs: "0.85rem", sm: "0.95rem" },
                  }}
                >
                  {card.desc}
                </Typography>
              </Box>
              <Button
                variant="contained"
                sx={{
                  bgcolor: "black",
                  color: "yellow",
                  borderRadius: "12px",
                  textTransform: "none",
                  fontWeight: "bold",
                  py: 1,
                }}
                fullWidth
              >
                {card.button}
              </Button>
            </Paper>
          </Box>

          
        ))}
      </Stack>
      {/* Footer */}


    </Container>
    
  );
  
}



====================================================================

//this is the report form with responsive mobile design 
import React, { useState, useEffect } from "react";
import {
  Container,
  Paper,
  Typography,
  Button,
  Box,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  IconButton,
  Card,
  CardContent,
  Stack,
  useMediaQuery,
} from "@mui/material";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import AddIcon from "@mui/icons-material/Add";
import axios from "axios";
import ReportForm from "./ReportForm";

export default function Reports() {
  const [reports, setReports] = useState([]);
  const [open, setOpen] = useState(false);
  const isMobile = useMediaQuery("(max-width:600px)");

  useEffect(() => {
    fetchReports();
  }, []);

  const fetchReports = () => {
    axios
      .get("http://localhost:8080/api/reports/my-reports")
      .then((res) => setReports(res.data))
      .catch((err) => console.error("Error fetching reports:", err));
  };

  const handleSubmit = (data) => {
    axios
      .post("http://localhost:8080/api/reports/create", data)
      .then((res) => setReports((prev) => [res.data, ...prev]))
      .catch((err) => console.error("Error creating report:", err));
  };

  const handleDelete = (id) => {
    axios
      .delete(`http://localhost:8080/api/reports/${id}`)
      .then(() => setReports(reports.filter((r) => r.id !== id)))
      .catch((err) => console.error("Delete failed:", err));
  };

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      {/* Header */}
      <Paper
        elevation={3}
        sx={{
          p: { xs: 3, sm: 4 },
          borderRadius: "16px",
          bgcolor: "black",
          color: "white",
          textAlign: "center",
        }}
      >
        <Typography
          variant="h4"
          fontWeight="bold"
          sx={{ color: "yellow", mb: 2 }}
        >
          My Reports
        </Typography>
        <Typography variant="body1">
          Here you can view, edit, and delete your submitted reports.
        </Typography>
      </Paper>

      {/* Add New Report Button */}
      <Box sx={{ mt: 3, textAlign: "right" }}>
        <Button
          variant="contained"
          startIcon={<AddIcon />}
          sx={{
            bgcolor: "black",
            color: "yellow",
            borderRadius: "12px",
            "&:hover": { bgcolor: "yellow", color: "black" },
          }}
          onClick={() => setOpen(true)}
        >
          New Report
        </Button>
      </Box>

      {/* Popup Form */}
      <ReportForm
        open={open}
        handleClose={() => setOpen(false)}
        handleSubmit={handleSubmit}
      />

      {/* Reports List */}
      {isMobile ? (
        // üì± Mobile Card Layout
        <Box sx={{ mt: 3 }}>
          {reports.length > 0 ? (
            reports.map((report) => (
              <Card
                key={report.id}
                elevation={3}
                sx={{
                  mb: 2,
                  borderRadius: "12px",
                  bgcolor: "#111",
                  color: "white",
                  p: 1,
                }}
              >
                <CardContent>
                  <Typography
                    variant="h6"
                    sx={{ color: "yellow", fontWeight: "bold" }}
                  >
                    {report.title}
                  </Typography>
                  <Typography variant="body2" sx={{ mt: 0.5 }}>
                    üè∑ Category: {report.category}
                  </Typography>
                  <Typography variant="body2">
                    üìÖ Date:{" "}
                    {new Date(report.dateCreated).toLocaleDateString()}
                  </Typography>
                  <Typography
                    variant="body2"
                    sx={{
                      mt: 0.5,
                      color:
                        report.status === "Resolved" ? "lightgreen" : "orange",
                    }}
                  >
                    ‚öô Status: {report.status || "Pending"}
                  </Typography>

                  {/* Actions */}
                  <Stack direction="row" spacing={1} sx={{ mt: 1 }}>
                    <IconButton
                      size="small"
                      color="primary"
                      sx={{
                        bgcolor: "rgba(255,255,0,0.1)",
                        "&:hover": { bgcolor: "yellow", color: "black" },
                      }}
                    >
                      <EditIcon fontSize="small" />
                    </IconButton>
                    <IconButton
                      size="small"
                      color="error"
                      onClick={() => handleDelete(report.id)}
                      sx={{
                        bgcolor: "rgba(255,0,0,0.1)",
                        "&:hover": { bgcolor: "red", color: "white" },
                      }}
                    >
                      <DeleteIcon fontSize="small" />
                    </IconButton>
                  </Stack>
                </CardContent>
              </Card>
            ))
          ) : (
            <Typography align="center" sx={{ mt: 3, color: "text.secondary" }}>
              No reports found.
            </Typography>
          )}
        </Box>
      ) : (
        // üíª Desktop Table Layout
        <TableContainer component={Paper} sx={{ mt: 3 }}>
          <Table>
            <TableHead sx={{ bgcolor: "black" }}>
              <TableRow>
                {["Title", "Category", "Status", "Date Created", "Actions"].map(
                  (head) => (
                    <TableCell
                      key={head}
                      sx={{ color: "yellow", fontWeight: "bold" }}
                    >
                      {head}
                    </TableCell>
                  )
                )}
              </TableRow>
            </TableHead>
            <TableBody>
              {reports.length > 0 ? (
                reports.map((report) => (
                  <TableRow key={report.id}>
                    <TableCell>{report.title}</TableCell>
                    <TableCell>{report.category}</TableCell>
                    <TableCell>{report.status || "Pending"}</TableCell>
                    <TableCell>
                      {new Date(report.dateCreated).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <IconButton color="primary">
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        color="error"
                        onClick={() => handleDelete(report.id)}
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={5} align="center">
                    No reports found.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </TableContainer>
      )}
    </Container>
  );
}

===========================================================

//this is mobile design for reports 

 {/* Responsive Layout */}
      {isMobile ? (
        // üì± Collapsible Mobile Card Layout
        <Stack spacing={2} sx={{ mt: 3 }}>
          {reports.length > 0 ? (
            reports.map((report) => {
              const isExpanded = expandedId === report.id;
              return (
                <Card
                  key={report.id}
                  elevation={3}
                  sx={{
                    borderRadius: "14px",
                    bgcolor: "black",
                    color: "white",
                    border: "1px solid rgba(255, 255, 0, 0.3)",
                    boxShadow: "0 2px 6px rgba(0,0,0,0.4)",
                  }}
                >
                  <CardContent
                    sx={{
                      p: 2,
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                    }}
                    onClick={() => toggleExpand(report.id)}
                  >
                    <Box>
                      <Typography
                        variant="subtitle1"
                        fontWeight="bold"
                        sx={{ color: "yellow" }}
                      >
                        {report.title}
                      </Typography>
                      <Typography
                        variant="body2"
                        sx={{
                          color:
                            report.status === "Resolved"
                              ? "#00e676"
                              : report.status === "Rejected"
                              ? "#ff5252"
                              : "orange",
                        }}
                      >
                        {report.status || "Pending"}
                      </Typography>
                    </Box>
                    <IconButton
                      sx={{ color: "yellow" }}
                      size="small"
                      onClick={(e) => {
                        e.stopPropagation(); //Prevents double toggle
                        toggleExpand(report.id);
                      }}
                    >
                      {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    </IconButton>

                  </CardContent>

                  <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                    <CardContent sx={{ p: 2, pt: 0 }}>
                      <Typography variant="body2" sx={{ color: "#f0f0f0" }}>
                        üè∑Ô∏è <b>Category:</b> {report.category}
                      </Typography>
                      <Typography variant="body2" sx={{ color: "#f0f0f0" }}>
                        üìÖ <b>Date:</b>{" "}
                        {new Date(report.dateCreated).toLocaleDateString()}
                      </Typography>

                      <Box
                        sx={{
                          mt: 1.5,
                          display: "flex",
                          justifyContent: "flex-end",
                          gap: 1,
                        }}
                      >
                        <IconButton
                          size="small"
                          sx={{
                            color: "yellow",
                            bgcolor: "rgba(255,255,255,0.08)",
                            "&:hover": { bgcolor: "rgba(255,255,0,0.2)" },
                          }}
                        >
                          <EditIcon fontSize="small" />
                        </IconButton>
                        <IconButton
                          size="small"
                          sx={{
                            color: "#ff5252",
                            bgcolor: "rgba(255,255,255,0.08)",
                            "&:hover": { bgcolor: "rgba(255,82,82,0.2)" },
                          }}
                          onClick={() => handleDelete(report.id)}
                        >
                          <DeleteIcon fontSize="small" />
                        </IconButton>
                      </Box>
                    </CardContent>
                  </Collapse>
                </Card>
              );
            })
          ) : (
            <Typography align="center" sx={{ mt: 2, color: "text.secondary" }}>
              No reports found.
            </Typography>
          )}
        </Stack>
      ) : (

===================================================================
//fetch all report 

import React from "react";
import 'bootstrap/dist/css/bootstrap.min.css';



const feedData = [
  {
    id: 1,
    user: "Jane Doe",
    avatar: "https://via.placeholder.com/50",
    time: "2 hours ago",
    content: "Just reported a street light issue near my area. Hoping it gets fixed soon!",
    image: "https://via.placeholder.com/500x250",
  },
  {
    id: 2,
    user: "John Smith",
    avatar: "https://via.placeholder.com/50",
    time: "5 hours ago",
    content: "Community clean-up day tomorrow! Who‚Äôs joining?",
    image: "",
  },
];

export default function Feed() {
  return (
    <div className="container my-4">
      <div className="row justify-content-center">
        <div className="col-12 col-md-8">
          {feedData.map((post) => (
            <div className="card mb-4 shadow-sm" key={post.id}>
              <div className="card-body">
                {/* User Info */}
                <div className="d-flex align-items-center mb-2">
                  <img
                    src={post.avatar}
                    alt="avatar"
                    className="rounded-circle me-2"
                    style={{ width: "50px", height: "50px" }}
                  />
                  <div>
                    <h6 className="mb-0">{post.user}</h6>
                    <small className="text-muted">{post.time}</small>
                  </div>
                </div>

                {/* Content */}
                <p>{post.content}</p>

                {/* Image if available */}
                {post.image && (
                  <img
                    src={post.image}
                    alt="post"
                    className="img-fluid rounded mb-2"
                  />
                )}

                {/* Actions */}
                <div className="d-flex justify-content-between">
                  <button className="btn btn-outline-primary btn-sm">Like</button>
                  <button className="btn btn-outline-secondary btn-sm">Comment</button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

============================================================

//this is for fetch all reports 


import React, { useEffect, useState } from "react";
import {
  Box,
  Container,
  Typography,
  Paper,
  Stack,
  Chip,
  Button,
  CircularProgress,
  Grid,
} from "@mui/material";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import Footer from "../components/Footer";

export default function Feed() {
  const navigate = useNavigate();
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);

  const formatLabel = (str) => {
    if (!str) return "";
    return str
      .toLowerCase()
      .split("_")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ");
  };

  useEffect(() => {
    setLoading(true);
    axios
      .get("http://localhost:8080/api/reports/fetch_all", {
        withCredentials: true,
      })
      .then((res) => {
        const data = res.data?.reports || res.data || [];
        // Sort: Pending first, Resolved last
        const sorted = data.sort((a, b) => {
          if (a.status === "Resolved" && b.status !== "Resolved") return 1;
          if (a.status !== "Resolved" && b.status === "Resolved") return -1;
          return 0;
        });
        setReports(sorted);
      })
      .catch((err) => console.error(err))
      .finally(() => setLoading(false));
  }, []);

  if (loading) {
    return (
      <Container sx={{ mt: 6, textAlign: "center" }}>
        <CircularProgress color="warning" />
        <Typography sx={{ mt: 2, color: "gray" }}>Loading feed...</Typography>
      </Container>
    );
  }

  if (!reports.length) {
    return (
      <Container sx={{ mt: 6, textAlign: "center" }}>
        <Typography color="gray">No reports found.</Typography>
      </Container>
    );
  }

  return (
    <Box
      sx={{
        minHeight: "100vh",
        display: "flex",
        flexDirection: "column",
        bgcolor: "#0D0D0D",
        color: "white",
      }}
    >
      <Container maxWidth="lg" sx={{ mt: 4, mb: 4, flex: 1 }}>
        <Typography
          variant="h4"
          sx={{
            color: "yellow",
            fontWeight: "bold",
            mb: 4,
            textAlign: "center",
          }}
        >
          Community Feed
        </Typography>

        <Stack spacing={3}>
          {reports.map((report) => (
            <Paper
              key={report.id}
              elevation={4}
              sx={{
                p: { xs: 2, sm: 3 },
                borderRadius: "16px",
                bgcolor: "rgba(255,255,255,0.05)",
                border: "1px solid rgba(255,255,255,0.1)",
                display: "flex",
                flexDirection: { xs: "column", md: "row" },
                alignItems: "flex-start",
                transition: "all 0.3s ease",
                "&:hover": {
                  transform: "translateY(-6px)",
                  boxShadow: "0 8px 25px rgba(255,255,0,0.2)",
                },
              }}
            >
              {/* Left side: Title + Chips + Date */}
              <Box sx={{ flex: { xs: "unset", md: 1 }, mb: { xs: 2, md: 0 }, pr: { md: 3 } }}>
                <Typography
                  variant="h6"
                  sx={{ fontWeight: "bold", color: "yellow", mb: 1 }}
                >
                  {report.title}
                </Typography>

                <Stack direction="row" spacing={1} flexWrap="wrap" mb={1}>
                  <Chip
                    label={`Category: ${formatLabel(report.category)}`}
                    sx={{
                      bgcolor: "rgba(255,255,255,0.1)",
                      color: "white",
                      border: "1px solid rgba(255,255,255,0.2)",
                      fontSize: "0.75rem",
                    }}
                  />
                  <Chip
                    label={`Status: ${formatLabel(report.status)}`}
                    sx={{
                      bgcolor:
                        report.status === "Pending"
                          ? "rgba(255,255,0,0.2)"
                          : report.status === "Resolved"
                          ? "rgba(0,255,0,0.2)"
                          : "rgba(255,255,255,0.1)",
                      color: "white",
                      border: "1px solid rgba(255,255,255,0.2)",
                      fontSize: "0.75rem",
                    }}
                  />
                  <Chip
                    label={`Priority: ${formatLabel(report.priority)}`}
                    sx={{
                      bgcolor:
                        report.priority === "HIGH"
                          ? "rgba(255,0,0,0.2)"
                          : report.priority === "MEDIUM"
                          ? "rgba(255,165,0,0.2)"
                          : "rgba(0,255,0,0.2)",
                      color: "white",
                      border: "1px solid rgba(255,255,255,0.2)",
                      fontSize: "0.75rem",
                    }}
                  />
                </Stack>

                <Typography
                  variant="caption"
                  sx={{ color: "rgba(255,255,255,0.6)" }}
                >
                  Reported on:{" "}
                  {new Date(report.dateCreated).toLocaleString(undefined, {
                    dateStyle: "medium",
                    timeStyle: "short",
                  })}
                </Typography>
              </Box>

              {/* Right side: Description + View Button */}
              <Box
                sx={{
                  flex: { xs: "unset", md: 2 },
                  mt: { xs: 2, md: 0 },
                  display: "flex",
                  flexDirection: "column",
                  justifyContent: "space-between",
                }}
              >
                <Typography
                  variant="body2"
                  sx={{
                    color: "gray",
                    mb: 2,
                    lineHeight: 1.6,
                  }}
                >
                  {report.description || "No description provided."}
                </Typography>

                <Button
                  variant="contained"
                  fullWidth
                  sx={{
                    bgcolor: "black",
                    color: "yellow",
                    borderRadius: "12px",
                    textTransform: "none",
                    fontWeight: "bold",
                    py: 1,
                    "&:hover": { bgcolor: "rgba(255,255,0,0.1)" },
                  }}
                  onClick={() => navigate(`/report/${report.id}`)}
                >
                  View Details
                </Button>
              </Box>
            </Paper>
          ))}
        </Stack>
      </Container>

      {/* Sticky Footer */}
      <Footer />
    </Box>
  );
}


=====================================================================

//manage report admin

import React, { useState, useEffect } from "react";
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  MenuItem,
  Button,
  IconButton,
  Tooltip,
  Grid,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  useMediaQuery,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VerifiedIcon from "@mui/icons-material/Verified";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useTheme } from "@mui/material/styles";

export default function AdminManageReports() {
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));

  const [reports, setReports] = useState([]);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("All");

  useEffect(() => {
    axios
      .get("http://localhost:8080/api/reports/fetch_all", {
        withCredentials: true,
      })
      .then((res) => setReports(res.data))
      .catch((err) => console.error("Failed to fetch reports", err));
  }, []);

  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this report?")) {
      axios
        .delete(`http://localhost:8080/api/reports/delete/${id}`)
        .then(() => setReports(reports.filter((r) => r.id !== id)))
        .catch((err) => console.error("Failed to delete report", err));
    }
  };

  const handleVerify = (id) => {
    axios
      .put(`http://localhost:8080/api/reports/verify/${id}`)
      .then(() =>
        setReports(
          reports.map((r) =>
            r.id === id ? { ...r, status: "Verified" } : r
          )
        )
      )
      .catch((err) => console.error("Failed to verify report", err));
  };

  const handleResolve = (id) => {
    axios
      .put(`http://localhost:8080/api/reports/resolve/${id}`)
      .then(() =>
        setReports(
          reports.map((r) =>
            r.id === id ? { ...r, status: "Resolved" } : r
          )
        )
      )
      .catch((err) => console.error("Failed to resolve report", err));
  };

  const filteredReports = reports.filter((r) => {
    const matchesSearch =
      r.title?.toLowerCase().includes(search.toLowerCase()) ||
      r.description?.toLowerCase().includes(search.toLowerCase());
    const matchesFilter = filter === "All" || r.status === filter;
    return matchesSearch && matchesFilter;
  });

  return (
    <Box
      sx={{
        minHeight: "100vh",
        bgcolor: isMobile ? "#0d0d0d" : "background.default",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Container maxWidth="lg" sx={{ mt: 3, mb: 4, flex: 1 }}>
        {/* Header */}
        <Paper
          elevation={3}
          sx={{
            p: { xs: 2, sm: 3 },
            borderRadius: "16px",
            bgcolor: "black",
            color: "white",
            textAlign: isMobile ? "center" : "left",
          }}
        >
          <Box
            display="flex"
            alignItems="center"
            justifyContent={isMobile ? "center" : "space-between"}
            flexWrap="wrap"
            gap={1}
          >
            {!isMobile && (
              <Button
                startIcon={<ArrowBackIcon />}
                variant="outlined"
                sx={{
                  color: "yellow",
                  borderColor: "yellow",
                  "&:hover": { borderColor: "white", color: "white" },
                }}
                onClick={() => navigate("/admin/home")}
              >
                Back
              </Button>
            )}

            <Typography
              variant={isMobile ? "h6" : "h5"}
              fontWeight="bold"
              sx={{
                color: "yellow",
                width: "100%",
                textAlign: "center",
                letterSpacing: "0.5px",
              }}
            >
              Manage Reports
            </Typography>

            {isMobile && (
              <Button
                startIcon={<ArrowBackIcon />}
                variant="outlined"
                size="small"
                sx={{
                  color: "yellow",
                  borderColor: "yellow",
                  mt: 1,
                  "&:hover": { borderColor: "white", color: "white" },
                }}
                onClick={() => navigate("/admin/home")}
              >
                Back
              </Button>
            )}
          </Box>
        </Paper>

        {/* Filters */}
        <Paper
          elevation={2}
          sx={{
            mt: 3,
            p: 2,
            borderRadius: "12px",
            display: "flex",
            flexWrap: "wrap",
            gap: 2,
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <TextField
            label="Search Reports"
            variant="outlined"
            size="small"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            sx={{ flex: 1, minWidth: 220 }}
          />
          <TextField
            label="Filter by Status"
            select
            variant="outlined"
            size="small"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            sx={{ width: 200 }}
          >
            {["All", "Pending", "Verified", "Resolved"].map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>
        </Paper>

        {/* Mobile View */}
        {isMobile ? (
          <Grid container spacing={2} sx={{ mt: 2 }}>
            {filteredReports.length > 0 ? (
              filteredReports.map((r) => (
                <Grid item xs={12} key={r.id}>
                  <Paper
                    elevation={4}
                    sx={{
                      p: 2,
                      mx: "auto",
                      width: "100%",
                      borderRadius: "12px",
                      bgcolor: "#1a1a1a",
                      color: "white",
                      boxShadow: "0px 3px 10px rgba(255, 255, 0, 0.15)",
                      transition: "transform 0.25s, box-shadow 0.25s",
                      "&:hover": {
                        transform: "translateY(-4px)",
                        boxShadow: "0px 6px 16px rgba(255, 255, 0, 0.25)",
                      },
                    }}
                  >
                    <Typography variant="subtitle1" fontWeight="bold">
                      {r.title || "Untitled Report"}
                    </Typography>
                    <Typography
                      variant="body2"
                      sx={{ color: "#ccc", mt: 0.5 }}
                    >
                      {r.description || "No description provided."}
                    </Typography>

                    <Divider sx={{ my: 1 }} />

                    <Typography variant="body2" sx={{ color: "gray" }}>
                      Status:{" "}
                      <span
                        style={{
                          color:
                            r.status === "Resolved"
                              ? "#00e676"
                              : r.status === "Verified"
                              ? "#ffb74d"
                              : "#ef5350",
                          fontWeight: "bold",
                        }}
                      >
                        {r.status || "Pending"}
                      </span>
                    </Typography>

                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "space-around",
                        mt: 1.5,
                      }}
                    >
                      <Tooltip title="View Details">
                        <IconButton color="primary">
                          <VisibilityIcon />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Verify">
                        <IconButton
                          onClick={() => handleVerify(r.id)}
                          sx={{ color: "#ffb74d" }}
                        >
                          <VerifiedIcon />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Resolve">
                        <IconButton
                          onClick={() => handleResolve(r.id)}
                          sx={{ color: "#00e676" }}
                        >
                          <CheckCircleIcon />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Delete">
                        <IconButton
                          onClick={() => handleDelete(r.id)}
                          sx={{ color: "#ef5350" }}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </Paper>
                </Grid>
              ))
            ) : (
              <Grid item xs={12}>
                <Paper
                  sx={{
                    p: 4,
                    textAlign: "center",
                    borderRadius: "12px",
                    color: "gray",
                    bgcolor: "#1a1a1a",
                  }}
                >
                  <Typography>No reports found.</Typography>
                </Paper>
              </Grid>
            )}
          </Grid>
        ) : (
          // Desktop Table (unchanged)
          <TableContainer
            component={Paper}
            elevation={3}
            sx={{ mt: 3, borderRadius: "12px" }}
          >
            <Table>
              <TableHead sx={{ bgcolor: "black" }}>
                <TableRow>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>
                    Title
                  </TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>
                    Description
                  </TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>
                    Status
                  </TableCell>
                  <TableCell
                    align="center"
                    sx={{ color: "yellow", fontWeight: "bold" }}
                  >
                    Actions
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredReports.length > 0 ? (
                  filteredReports.map((r) => (
                    <TableRow
                      key={r.id}
                      sx={{
                        "&:hover": {
                          bgcolor: "rgba(255,255,0,0.05)",
                        },
                      }}
                    >
                      <TableCell>{r.title}</TableCell>
                      <TableCell>{r.description}</TableCell>
                      <TableCell>
                        <Typography
                          sx={{
                            color:
                              r.status === "Resolved"
                                ? "green"
                                : r.status === "Verified"
                                ? "orange"
                                : "red",
                            fontWeight: "bold",
                          }}
                        >
                          {r.status || "Pending"}
                        </Typography>
                      </TableCell>
                      <TableCell align="center">
                        <Tooltip title="View Details">
                          <IconButton color="primary">
                            <VisibilityIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Verify">
                          <IconButton
                            onClick={() => handleVerify(r.id)}
                            sx={{ color: "orange" }}
                          >
                            <VerifiedIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Resolve">
                          <IconButton
                            onClick={() => handleResolve(r.id)}
                            sx={{ color: "green" }}
                          >
                            <CheckCircleIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton
                            onClick={() => handleDelete(r.id)}
                            sx={{ color: "red" }}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} align="center" sx={{ color: "gray" }}>
                      No reports found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Container>

      {/* Footer */}
      <Box
        component="footer"
        sx={{
          flexShrink: 0,
          py: 2,
          textAlign: "center",
          color: "gray",
          fontSize: "0.8rem",
          borderTop: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        ¬© 2025 Community Reporting App ‚Äî Admin Portal
      </Box>
    </Box>
  );
}


============================================

//admin manage report
import React, { useState, useEffect } from "react";
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  MenuItem,
  Button,
  IconButton,
  Tooltip,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  useMediaQuery,
  Collapse,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VerifiedIcon from "@mui/icons-material/Verified";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useTheme } from "@mui/material/styles";
import "bootstrap/dist/css/bootstrap.min.css";
import { Snackbar, Alert } from "@mui/material";





export default function AdminManageReports() {
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));

  const [reports, setReports] = useState([]);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("All");
  const [expandedIds, setExpandedIds] = useState([]);

  const [previousIds, setPreviousIds] = useState([]);
const [newReportAlert, setNewReportAlert] = useState(false);
  





 useEffect(() => {
  const fetchReports = () => {
    axios
      .get("http://localhost:8080/api/reports/fetch_all", { withCredentials: true })
      .then((res) => {
        const sortedReports = res.data.slice().sort((a, b) => {
          if (a.status === "Resolved" && b.status !== "Resolved") return 1;
          if (a.status !== "Resolved" && b.status === "Resolved") return -1;
          return 0;
        });

        // Check for new report
        const newIds = sortedReports.map(r => r.id);
        if (previousIds.length > 0 && newIds.some(id => !previousIds.includes(id))) {
          setNewReportAlert(true);
        }
        setPreviousIds(newIds);

        setReports(sortedReports);
      })
      .catch((err) => console.error("Failed to fetch reports", err));
  };

  fetchReports();
  const interval = setInterval(fetchReports, 5000);

  return () => clearInterval(interval);
}, [previousIds]);



  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this report?")) {
      axios
        .delete(`http://localhost:8080/api/reports/delete/${id}`)
        .then(() => setReports(reports.filter((r) => r.id !== id)))
        .catch((err) => console.error("Failed to delete report", err));
    }
  };

  const handleVerify = (id) => {
    axios
      .put(`http://localhost:8080/api/reports/verify/${id}`)
      .then(() =>
        setReports(
          reports.map((r) =>
            r.id === id ? { ...r, status: "Verified" } : r
          )
        )
      )
      .catch((err) => console.error("Failed to verify report", err));
  };

  const handleResolve = (id) => {
    axios
      .put(`http://localhost:8080/api/reports/resolve/${id}`)
      .then(() =>
        setReports(
          reports.map((r) =>
            r.id === id ? { ...r, status: "Resolved" } : r
          )
        )
      )
      .catch((err) => console.error("Failed to resolve report", err));
  };

  const toggleExpand = (id) => {
    setExpandedIds((prev) =>
      prev.includes(id)
        ? prev.filter((item) => item !== id)
        : [...prev, id]
    );
  };

  const filteredReports = reports.filter((r) => {
    const matchesSearch =
      r.title?.toLowerCase().includes(search.toLowerCase()) ||
      r.description?.toLowerCase().includes(search.toLowerCase());
    const matchesFilter = filter === "All" || r.status === filter;
    return matchesSearch && matchesFilter;
  });

  return (
    <Box
      sx={{
        minHeight: "100vh",
        bgcolor: isMobile ? "#0d0d0d" : "background.default",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Container maxWidth="lg" className="px-3" sx={{ mt: 3, mb: 4, flex: 1 }}>
        {/* Header */}
        {/* Header */}
        <Paper
        elevation={3}
        sx={{
            p: { xs: 2, sm: 3 },
            borderRadius: "16px",
            bgcolor: "black",
            color: "white",
            position: "relative", // for mobile floating arrow
        }}
        >
        {/* Mobile Floating Back Arrow */}
        {isMobile && (
            <IconButton
            onClick={() => navigate("/admin/home")}
            sx={{
                position: "absolute",
                top: 12,
                left: 12,
                color: "yellow",
                bgcolor: "black",
                border: "1px solid yellow",
                "&:hover": { bgcolor: "#222" },
            }}
            size="small"
            >
            <ArrowBackIcon fontSize="small" />
            </IconButton>
        )}

        <Box
            display="flex"
            alignItems="center"
            justifyContent={isMobile ? "center" : "space-between"}
            flexWrap="wrap"
            gap={1}
        >
            {/* Desktop Back Button */}
            {!isMobile && (
            <Box
                sx={{
                display: "flex",
                justifyContent: "flex-start",
                }}
            >
                <Button
                startIcon={<ArrowBackIcon />}
                variant="outlined"
                size="medium"
                sx={{
                    color: "yellow",
                    borderColor: "yellow",
                    "&:hover": { borderColor: "white", color: "white" },
                }}
                onClick={() => navigate("/admin/home")}
                >
                Back
                </Button>
            </Box>
            )}

            {/* Title */}
            <Typography
            variant={isMobile ? "h6" : "h5"}
            fontWeight="bold"
            sx={{
                color: "yellow",
                textAlign: isMobile ? "center" : "right",
                width: isMobile ? "100%" : "auto",
                letterSpacing: "0.5px",
            }}
            >
            Manage Reports
            </Typography>
        </Box>
        </Paper>


        {/* Filters */}
        <Paper
          elevation={2}
          className="mt-3"
          sx={{
            p: 2,
            borderRadius: "12px",
            display: "flex",
            flexWrap: "wrap",
            gap: 2,
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <TextField
            label="Search Reports"
            variant="outlined"
            size="small"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            sx={{ flex: 1, minWidth: 220 }}
          />
          <TextField
            label="Filter by Status"
            select
            variant="outlined"
            size="small"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            sx={{ width: 200 }}
          >
            {["All", "Pending", "Verified", "Resolved"].map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>
        </Paper>

        {/* Mobile Collapsible Cards */}
        {isMobile ? (
          <div className="row mt-3">
            {filteredReports.length > 0 ? (
              filteredReports.map((r) => {
                const isExpanded = expandedIds.includes(r.id);
                return (
                  <div className="col-12 mb-3" key={r.id}>
                    <Paper
                      elevation={4}
                      sx={{
                        p: 2,
                        width: "100%",
                        borderRadius: "12px",
                        bgcolor: "#1a1a1a",
                        color: "white",
                        border: "1px solid rgba(255,255,0,0.3)",
                      }}
                    >
                      {/* Header Row */}
                      <Box
                        display="flex"
                        justifyContent="space-between"
                        alignItems="center"
                        onClick={() => toggleExpand(r.id)}
                      >
                        <Box>
                          <Typography variant="subtitle1" fontWeight="bold" sx={{ color: "yellow" }}>
                            {r.title || "Untitled Report"}
                          </Typography>
                          <Typography
                            variant="body2"
                            sx={{
                              color:
                                r.status === "Resolved"
                                  ? "#00e676"
                                  : r.status === "Verified"
                                  ? "#ffb74d"
                                  : "#ef5350",
                            }}
                          >
                            {r.status || "Pending"}
                          </Typography>
                        </Box>

                        <IconButton
                          sx={{ color: "yellow" }}
                          size="small"
                          onClick={(e) => {
                            e.stopPropagation();
                            toggleExpand(r.id);
                          }}
                        >
                          {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                        </IconButton>
                      </Box>

                      {/* Collapsible Section */}
                      <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                        <Divider sx={{ my: 1 }} />
                        <Typography variant="body2" sx={{ color: "#ccc" }}>
                          {r.description || "No description provided."}
                        </Typography>

                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "space-around",
                            mt: 1.5,
                            flexWrap: "wrap",
                          }}
                        >
                          <Tooltip title="View Details">
                            <IconButton color="primary">
                              <VisibilityIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Verify">
                            <IconButton
                              onClick={() => handleVerify(r.id)}
                              sx={{ color: "#ffb74d" }}
                            >
                              <VerifiedIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Resolve">
                            <IconButton
                              onClick={() => handleResolve(r.id)}
                              sx={{ color: "#00e676" }}
                            >
                              <CheckCircleIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Delete">
                            <IconButton
                              onClick={() => handleDelete(r.id)}
                              sx={{ color: "#ef5350" }}
                            >
                              <DeleteIcon />
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </Collapse>
                    </Paper>
                  </div>
                );
              })
            ) : (
              <div className="col-12">
                <Paper
                  sx={{
                    p: 4,
                    textAlign: "center",
                    borderRadius: "12px",
                    color: "gray",
                    bgcolor: "#1a1a1a",
                  }}
                >
                  <Typography>No reports found.</Typography>
                </Paper>
              </div>
            )}
          </div>
        ) : (
          // Desktop Table View
          <TableContainer
            component={Paper}
            elevation={3}
            sx={{ mt: 3, borderRadius: "12px" }}
          >
            <Table>
              <TableHead sx={{ bgcolor: "black" }}>
                <TableRow>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Title</TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Description</TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Status</TableCell>
                  <TableCell align="center" sx={{ color: "yellow", fontWeight: "bold" }}>
                    Actions
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredReports.length > 0 ? (
                  filteredReports.map((r) => (
                    <TableRow
                      key={r.id}
                      sx={{
                        "&:hover": {
                          bgcolor: "rgba(255,255,0,0.05)",
                        },
                      }}
                    >
                      <TableCell>{r.title}</TableCell>
                      <TableCell>{r.description}</TableCell>
                      <TableCell>
                        <Typography
                          sx={{
                            color:
                              r.status === "Resolved"
                                ? "green"
                                : r.status === "Verified"
                                ? "orange"
                                : "red",
                            fontWeight: "bold",
                          }}
                        >
                          {r.status || "Pending"}
                        </Typography>
                      </TableCell>
                      <TableCell align="center">
                        <Tooltip title="View Details">
                          <IconButton color="primary">
                            <VisibilityIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Verify">
                          <IconButton onClick={() => handleVerify(r.id)} sx={{ color: "orange" }}>
                            <VerifiedIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Resolve">
                          <IconButton onClick={() => handleResolve(r.id)} sx={{ color: "green" }}>
                            <CheckCircleIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton onClick={() => handleDelete(r.id)} sx={{ color: "red" }}>
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} align="center" sx={{ color: "gray" }}>
                      No reports found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        
      </Container>
      <Snackbar
  open={newReportAlert}
  autoHideDuration={3000}
  onClose={() => setNewReportAlert(false)}
  anchorOrigin={{ vertical: "top", horizontal: "center" }}
>
  <Alert severity="info" sx={{ width: "100%" }}>
    New report added!
  </Alert>
</Snackbar>

      {/* Footer */}
      <Box
        component="footer"
        sx={{
          flexShrink: 0,
          py: 2,
          textAlign: "center",
          color: "gray",
          fontSize: "0.8rem",
          borderTop: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        ¬© 2025 Community Reporting App ‚Äî Admin Portal
      </Box>
    </Box>
  );
}


=====================================================================
//manage reports admin (with final features and design)

import React, { useState, useEffect } from "react";
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  MenuItem,
  Button,
  IconButton,
  Tooltip,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  useMediaQuery,
  Collapse,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VerifiedIcon from "@mui/icons-material/Verified";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useTheme } from "@mui/material/styles";
import "bootstrap/dist/css/bootstrap.min.css";
import { Snackbar, Alert } from "@mui/material";

import { useRef } from "react";



export default function AdminManageReports() {
  const navigate = useNavigate();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));

  const [reports, setReports] = useState([]);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("All");
  const [expandedIds, setExpandedIds] = useState([]);

  const [previousIds, setPreviousIds] = useState([]);
  const [newReportAlert, setNewReportAlert] = useState(false);
    
  const previousIdsRef = useRef([]);

 
    useEffect(() => {
    const fetchReports = () => {
        axios.get("http://localhost:8080/api/reports/fetch_all", { withCredentials: true })
        .then(res => {
            const sortedReports = res.data.slice().sort((a, b) => {
            if (a.status === "Resolved" && b.status !== "Resolved") return 1;
            if (a.status !== "Resolved" && b.status === "Resolved") return -1;
            return 0;
            });

            const newIds = sortedReports.map(r => r.id);

            // Show Snackbar if new report exists
            if (previousIdsRef.current.length > 0 && newIds.some(id => !previousIdsRef.current.includes(id))) {
            setNewReportAlert(true);
            }

            previousIdsRef.current = newIds; // update ref
            setReports(sortedReports);
        })
        .catch(err => console.error("Failed to fetch reports", err));
    };

    fetchReports(); // fetch initially
    const interval = setInterval(fetchReports, 500); // repeat every 5s

    return () => clearInterval(interval);
    }, []); 



  const handleDelete = (id) => {
    if (window.confirm("Are you sure you want to delete this report?")) {
      axios
        .delete(`http://localhost:8080/api/reports/delete/${id}`)
        .then(() => setReports(reports.filter((r) => r.id !== id)))
        .catch((err) => console.error("Failed to delete report", err));
    }
  };

  const handleVerify = (id) => {
    axios
      .put(`http://localhost:8080/api/reports/verify/${id}`)
      .then(() =>
        setReports(
          reports.map((r) =>
            r.id === id ? { ...r, status: "Verified" } : r
          )
        )
      )
      .catch((err) => console.error("Failed to verify report", err));
  };

  const handleResolve = (id) => {
    axios
      .put(`http://localhost:8080/api/reports/resolve/${id}`)
      .then(() =>
        setReports(
          reports.map((r) =>
            r.id === id ? { ...r, status: "Resolved" } : r
          )
        )
      )
      .catch((err) => console.error("Failed to resolve report", err));
  };

  const toggleExpand = (id) => {
    setExpandedIds((prev) =>
      prev.includes(id)
        ? prev.filter((item) => item !== id)
        : [...prev, id]
    );
  };

  const filteredReports = reports.filter((r) => {
    const matchesSearch =
      r.title?.toLowerCase().includes(search.toLowerCase()) ||
      r.description?.toLowerCase().includes(search.toLowerCase());
    const matchesFilter = filter === "All" || r.status === filter;
    return matchesSearch && matchesFilter;
  });

  return (
    <Box
      sx={{
        minHeight: "100vh",
        bgcolor: isMobile ? "#0d0d0d" : "background.default",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Container maxWidth="lg" className="px-3" sx={{ mt: 3, mb: 4, flex: 1 }}>
        {/* Header */}
        {/* Header */}
        <Paper
        elevation={3}
        sx={{
            p: { xs: 2, sm: 3 },
            borderRadius: "16px",
            bgcolor: "black",
            color: "white",
            position: "relative", // for mobile floating arrow
        }}
        >
        {/* Mobile Floating Back Arrow */}
        {isMobile && (
            <IconButton
            onClick={() => navigate("/admin/home")}
            sx={{
                position: "absolute",
                top: 12,
                left: 12,
                color: "yellow",
                bgcolor: "black",
                border: "1px solid yellow",
                "&:hover": { bgcolor: "#222" },
            }}
            size="small"
            >
            <ArrowBackIcon fontSize="small" />
            </IconButton>
        )}

        <Box
            display="flex"
            alignItems="center"
            justifyContent={isMobile ? "center" : "space-between"}
            flexWrap="wrap"
            gap={1}
        >
            {/* Desktop Back Button */}
            {!isMobile && (
            <Box
                sx={{
                display: "flex",
                justifyContent: "flex-start",
                }}
            >
                <Button
                startIcon={<ArrowBackIcon />}
                variant="outlined"
                size="medium"
                sx={{
                    color: "yellow",
                    borderColor: "yellow",
                    "&:hover": { borderColor: "white", color: "white" },
                }}
                onClick={() => navigate("/admin/home")}
                >
                Back
                </Button>
            </Box>
            )}

            {/* Title */}
            <Typography
            variant={isMobile ? "h6" : "h5"}
            fontWeight="bold"
            sx={{
                color: "yellow",
                textAlign: isMobile ? "center" : "right",
                width: isMobile ? "100%" : "auto",
                letterSpacing: "0.5px",
            }}
            >
            Manage Reports
            </Typography>
        </Box>
        </Paper>


        {/* Filters */}
        <Paper
          elevation={2}
          className="mt-3"
          sx={{
            p: 2,
            borderRadius: "12px",
            display: "flex",
            flexWrap: "wrap",
            gap: 2,
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <TextField
            label="Search Reports"
            variant="outlined"
            size="small"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            sx={{ flex: 1, minWidth: 220 }}
          />
          <TextField
            label="Filter by Status"
            select
            variant="outlined"
            size="small"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            sx={{ width: 200 }}
          >
            {["All", "Pending", "Verified", "Resolved"].map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>
        </Paper>

        {/* Mobile Collapsible Cards */}
        {isMobile ? (
          <div className="row mt-3">
            {filteredReports.length > 0 ? (
              filteredReports.map((r) => {
                const isExpanded = expandedIds.includes(r.id);
                return (
                  <div className="col-12 mb-3" key={r.id}>
                    <Paper
                      elevation={4}
                      sx={{
                        p: 2,
                        width: "100%",
                        borderRadius: "12px",
                        bgcolor: "#1a1a1a",
                        color: "white",
                        border: "1px solid rgba(255,255,0,0.3)",
                      }}
                    >
                      {/* Header Row */}
                      <Box
                        display="flex"
                        justifyContent="space-between"
                        alignItems="center"
                        onClick={() => toggleExpand(r.id)}
                      >
                        <Box>
                          <Typography variant="subtitle1" fontWeight="bold" sx={{ color: "yellow" }}>
                            {r.title || "Untitled Report"}
                          </Typography>
                          <Typography
                            variant="body2"
                            sx={{
                              color:
                                r.status === "Resolved"
                                  ? "#00e676"
                                  : r.status === "Verified"
                                  ? "#ffb74d"
                                  : "#ef5350",
                            }}
                          >
                            {r.status || "Pending"}
                          </Typography>
                        </Box>

                        <IconButton
                          sx={{ color: "yellow" }}
                          size="small"
                          onClick={(e) => {
                            e.stopPropagation();
                            toggleExpand(r.id);
                          }}
                        >
                          {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                        </IconButton>
                      </Box>

                      {/* Collapsible Section */}
                      <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                        <Divider sx={{ my: 1 }} />
                        <Typography variant="body2" sx={{ color: "#ccc" }}>
                          {r.description || "No description provided."}
                        </Typography>

                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "space-around",
                            mt: 1.5,
                            flexWrap: "wrap",
                          }}
                        >
                          <Tooltip title="View Details">
                            <IconButton color="primary">
                              <VisibilityIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Verify">
                            <IconButton
                              onClick={() => handleVerify(r.id)}
                              sx={{ color: "#ffb74d" }}
                            >
                              <VerifiedIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Resolve">
                            <IconButton
                              onClick={() => handleResolve(r.id)}
                              sx={{ color: "#00e676" }}
                            >
                              <CheckCircleIcon />
                            </IconButton>
                          </Tooltip>
                          <Tooltip title="Delete">
                            <IconButton
                              onClick={() => handleDelete(r.id)}
                              sx={{ color: "#ef5350" }}
                            >
                              <DeleteIcon />
                            </IconButton>
                          </Tooltip>
                        </Box>
                      </Collapse>
                    </Paper>
                  </div>
                );
              })
            ) : (
              <div className="col-12">
                <Paper
                  sx={{
                    p: 4,
                    textAlign: "center",
                    borderRadius: "12px",
                    color: "gray",
                    bgcolor: "#1a1a1a",
                  }}
                >
                  <Typography>No reports found.</Typography>
                </Paper>
              </div>
            )}
          </div>
        ) : (
          // Desktop Table View
          <TableContainer
            component={Paper}
            elevation={3}
            sx={{ mt: 3, borderRadius: "12px" }}
          >
            <Table>
              <TableHead sx={{ bgcolor: "black" }}>
                <TableRow>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Title</TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Description</TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Status</TableCell>
                  <TableCell align="center" sx={{ color: "yellow", fontWeight: "bold" }}>
                    Actions
                  </TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredReports.length > 0 ? (
                  filteredReports.map((r) => (
                    <TableRow
                      key={r.id}
                      sx={{
                        "&:hover": {
                          bgcolor: "rgba(255,255,0,0.05)",
                        },
                      }}
                    >
                      <TableCell>{r.title}</TableCell>
                      <TableCell>{r.description}</TableCell>
                      <TableCell>
                        <Typography
                          sx={{
                            color:
                              r.status === "Resolved"
                                ? "green"
                                : r.status === "Verified"
                                ? "orange"
                                : "red",
                            fontWeight: "bold",
                          }}
                        >
                          {r.status || "Pending"}
                        </Typography>
                      </TableCell>
                      <TableCell align="center">
                        <Tooltip title="View Details">
                          <IconButton color="primary">
                            <VisibilityIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Verify">
                          <IconButton onClick={() => handleVerify(r.id)} sx={{ color: "orange" }}>
                            <VerifiedIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Resolve">
                          <IconButton onClick={() => handleResolve(r.id)} sx={{ color: "green" }}>
                            <CheckCircleIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete">
                          <IconButton onClick={() => handleDelete(r.id)} sx={{ color: "red" }}>
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={4} align="center" sx={{ color: "gray" }}>
                      No reports found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        )}

        
      </Container>
      <Snackbar
  open={newReportAlert}
  autoHideDuration={3000}
  onClose={() => setNewReportAlert(false)}
  anchorOrigin={{ vertical: "top", horizontal: "center" }}
>
  <Alert severity="info" sx={{ width: "100%" }}>
    New report added!
  </Alert>
</Snackbar>

      {/* Footer */}
      <Box
        component="footer"
        sx={{
          flexShrink: 0,
          py: 2,
          textAlign: "center",
          color: "gray",
          fontSize: "0.8rem",
          borderTop: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        ¬© 2025 Community Reporting App ‚Äî Admin Portal
      </Box>
    </Box>
  );
}





====================================================

// This is for manage new

// src/pages/NewsAndUpdates/AdminManageNews.jsx

import React, { useState, useEffect, useRef } from "react";
import {
  Box,
  Container,
  Paper,
  Typography,
  TextField,
  MenuItem,
  Button,
  IconButton,
  Tooltip,
  Divider,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  useMediaQuery,
  Collapse,
  Snackbar,
  Alert,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import VisibilityIcon from "@mui/icons-material/Visibility";
import ArrowBackIcon from "@mui/icons-material/ArrowBack";
import PublishIcon from "@mui/icons-material/Publish";
import UnpublishedIcon from "@mui/icons-material/Unpublished";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { useTheme } from "@mui/material/styles";

export default function AdminManageNews() {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const navigate = useNavigate();

  const [news, setNews] = useState([]);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("All");
  const [expandedIds, setExpandedIds] = useState([]);

  const [newNewsAlert, setNewNewsAlert] = useState(false);
  const [publishSuccessAlert, setPublishSuccessAlert] = useState(false);
  const [unpublishSuccessAlert, setUnpublishSuccessAlert] = useState(false);
  const [deleteSuccessAlert, setDeleteSuccessAlert] = useState(false);

  const previousIdsRef = useRef([]);

  const [dialog, setDialog] = useState({ open: false, mode: "add", newsItem: null });
  const [confirmDialog, setConfirmDialog] = useState({ open: false, type: null, id: null });

  // Fetch News
  useEffect(() => {
    const fetchNews = () => {
      axios
        .get("http://localhost:8080/api/news/fetch_all", { withCredentials: true })
        .then((res) => {
          const sortedNews = res.data.sort((a, b) =>
            a.status === "Published" && b.status !== "Published" ? -1 : 1
          );
          const newIds = sortedNews.map((n) => n.id);

          if (previousIdsRef.current.length > 0 && newIds.some((id) => !previousIdsRef.current.includes(id))) {
            setNewNewsAlert(true);
          }

          previousIdsRef.current = newIds;
          setNews(sortedNews);
        })
        .catch((err) => console.error("Failed to fetch news:", err));
    };

    fetchNews();
    const interval = setInterval(fetchNews, 5000);
    return () => clearInterval(interval);
  }, []);

  // Filtering logic
  const filteredNews = Array.isArray(news)
    ? news.filter((n) => {
        const matchSearch =
          n.title?.toLowerCase().includes(search.toLowerCase()) ||
          n.content?.toLowerCase().includes(search.toLowerCase());
        const matchFilter = filter === "All" || n.status === filter;
        return matchSearch && matchFilter;
      })
    : [];

  const toggleExpand = (id) => {
    setExpandedIds((prev) =>
      prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id]
    );
  };

  const openConfirmDialog = (type, id) => {
    setConfirmDialog({ open: true, type, id });
  };

  const closeConfirmDialog = () => {
    setConfirmDialog({ open: false, type: null, id: null });
  };

  const handleConfirmAction = () => {
    const { type, id } = confirmDialog;

    let request;
    if (type === "publish") {
      request = axios.put(`http://localhost:8080/api/news/publish/${id}`, {}, { withCredentials: true });
    } else if (type === "unpublish") {
      request = axios.put(`http://localhost:8080/api/news/unpublish/${id}`, {}, { withCredentials: true });
    } else if (type === "delete") {
      request = axios.delete(`http://localhost:8080/api/news/delete/${id}`, { withCredentials: true });
    }

    request
      .then(() => {
        setNews((prev) =>
          prev.map((n) =>
            n.id === id
              ? {
                  ...n,
                  status:
                    type === "publish"
                      ? "Published"
                      : type === "unpublish"
                      ? "Unpublished"
                      : undefined,
                }
              : n
          ).filter((n) => (type === "delete" ? n.id !== id : true))
        );

        closeConfirmDialog();
        if (type === "publish") setPublishSuccessAlert(true);
        if (type === "unpublish") setUnpublishSuccessAlert(true);
        if (type === "delete") setDeleteSuccessAlert(true);
      })
      .catch((err) => {
        console.error(`Failed to ${type} news:`, err);
        closeConfirmDialog();
      });
  };

  return (
    <Box
      sx={{
        minHeight: "100vh",
        bgcolor: isMobile ? "#0d0d0d" : "background.default",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Container maxWidth="lg" sx={{ mt: 3, mb: 4, flex: 1 }}>
        {/* Header */}
        <Paper
          elevation={3}
          sx={{
            p: { xs: 2, sm: 3 },
            borderRadius: "16px",
            bgcolor: "black",
            color: "white",
            position: "relative",
          }}
        >
          {isMobile && (
            <IconButton
              onClick={() => navigate("/admin/admin-home")}
              sx={{
                position: "absolute",
                top: 12,
                left: 12,
                color: "yellow",
                bgcolor: "black",
                border: "1px solid yellow",
                "&:hover": { bgcolor: "#222" },
              }}
              size="small"
            >
              <ArrowBackIcon fontSize="small" />
            </IconButton>
          )}
          <Box
            display="flex"
            alignItems="center"
            justifyContent={isMobile ? "center" : "space-between"}
            flexWrap="wrap"
            gap={1}
          >
            {!isMobile && (
              <Button
                startIcon={<ArrowBackIcon />}
                variant="outlined"
                size="medium"
                sx={{
                  color: "yellow",
                  borderColor: "yellow",
                  "&:hover": { borderColor: "white", color: "white" },
                }}
                onClick={() => navigate("/admin/admin-home")}
              >
                Back
              </Button>
            )}
            <Typography
              variant={isMobile ? "h6" : "h5"}
              fontWeight="bold"
              sx={{
                color: "yellow",
                textAlign: isMobile ? "center" : "right",
                width: isMobile ? "100%" : "auto",
                letterSpacing: "0.5px",
              }}
            >
              Manage News & Updates
            </Typography>
          </Box>
        </Paper>

        {/* Filters + Add Button */}
        <Paper
          elevation={2}
          sx={{
            p: 2,
            borderRadius: "12px",
            display: "flex",
            flexWrap: "wrap",
            gap: 2,
            alignItems: "center",
            justifyContent: "space-between",
          }}
        >
          <TextField
            label="Search News"
            variant="outlined"
            size="small"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            sx={{ flex: 1, minWidth: 220 }}
          />
          <TextField
            label="Filter by Status"
            select
            variant="outlined"
            size="small"
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            sx={{ width: 200 }}
          >
            {["All", "Published", "Unpublished"].map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            sx={{ bgcolor: "yellow", color: "black", "&:hover": { bgcolor: "#f9ff50" } }}
            onClick={() => setDialog({ open: true, mode: "add", newsItem: null })}
          >
            Add News
          </Button>
        </Paper>

        {/* Table / Mobile View */}
        {isMobile ? (
          filteredNews.length > 0 ? (
            filteredNews.map((n) => {
              const isExpanded = expandedIds.includes(n.id);
              return (
                <Paper
                  key={n.id}
                  elevation={3}
                  sx={{
                    p: 2,
                    mt: 2,
                    borderRadius: "12px",
                    bgcolor: "#1a1a1a",
                    color: "white",
                  }}
                >
                  <Box
                    display="flex"
                    justifyContent="space-between"
                    alignItems="center"
                    onClick={() => toggleExpand(n.id)}
                  >
                    <Box>
                      <Typography variant="subtitle1" fontWeight="bold">
                        {n.title || "Untitled"}
                      </Typography>
                      <Typography
                        variant="body2"
                        sx={{
                          color:
                            n.status === "Published" ? "#00e676" : "#ffb74d",
                        }}
                      >
                        {n.status}
                      </Typography>
                    </Box>
                    <IconButton sx={{ color: "yellow" }} size="small">
                      {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                    </IconButton>
                  </Box>
                  <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                    <Divider sx={{ my: 1 }} />
                    <Typography variant="body2" sx={{ color: "gray", mb: 1 }}>
                      {n.content || "No content available"}
                    </Typography>
                    <Box
                      sx={{
                        display: "flex",
                        justifyContent: "space-around",
                        mt: 1.5,
                        flexWrap: "wrap",
                      }}
                    >
                      <Tooltip title="View Details">
                        <IconButton color="primary">
                          <VisibilityIcon />
                        </IconButton>
                      </Tooltip>
                      <Tooltip title="Edit">
                        <IconButton sx={{ color: "orange" }}>
                          <EditIcon />
                        </IconButton>
                      </Tooltip>
                      {n.status === "Published" ? (
                        <Tooltip title="Unpublish">
                          <IconButton
                            sx={{ color: "red" }}
                            onClick={() => openConfirmDialog("unpublish", n.id)}
                          >
                            <UnpublishedIcon />
                          </IconButton>
                        </Tooltip>
                      ) : (
                        <Tooltip title="Publish">
                          <IconButton
                            sx={{ color: "green" }}
                            onClick={() => openConfirmDialog("publish", n.id)}
                          >
                            <PublishIcon />
                          </IconButton>
                        </Tooltip>
                      )}
                      <Tooltip title="Delete">
                        <IconButton
                          sx={{ color: "red" }}
                          onClick={() => openConfirmDialog("delete", n.id)}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </Tooltip>
                    </Box>
                  </Collapse>
                </Paper>
              );
            })
          ) : (
            <Typography sx={{ mt: 3, textAlign: "center", color: "gray" }}>
              No news found.
            </Typography>
          )
        ) : (
          <TableContainer component={Paper} elevation={3} sx={{ mt: 3, borderRadius: "12px" }}>
            <Table>
              <TableHead sx={{ bgcolor: "black" }}>
                <TableRow>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Title</TableCell>
                  <TableCell sx={{ color: "yellow", fontWeight: "bold" }}>Status</TableCell>
                  <TableCell align="center" sx={{ color: "yellow", fontWeight: "bold" }}>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {filteredNews.length > 0 ? (
                  filteredNews.map((n) => (
                    <TableRow key={n.id}>
                      <TableCell sx={{ color: "white", fontWeight: "bold" }}>
                        {n.title}
                      </TableCell>
                      <TableCell sx={{ color: n.status === "Published" ? "#00e676" : "#ffb74d" }}>
                        {n.status}
                      </TableCell>
                      <TableCell align="center">
                        <Tooltip title="View Details">
                          <IconButton color="primary">
                            <VisibilityIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Edit">
                          <IconButton sx={{ color: "orange" }}>
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        {n.status === "Published" ? (
                          <Tooltip title="Unpublish">
                            <IconButton
                              sx={{ color: "red" }}
                              onClick={() => openConfirmDialog("unpublish", n.id)}
                            >
                              <UnpublishedIcon />
                            </IconButton>
                          </Tooltip>
                        ) : (
                          <Tooltip title="Publish">
                            <IconButton
                              sx={{ color: "green" }}
                              onClick={() => openConfirmDialog("publish", n.id)}
                            >
                              <PublishIcon />
                            </IconButton>
                          </Tooltip>
                        )}
                        <Tooltip title="Delete">
                          <IconButton
                            sx={{ color: "red" }}
                            onClick={() => openConfirmDialog("delete", n.id)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))
                ) : (
                  <TableRow>
                    <TableCell colSpan={3} align="center" sx={{ color: "gray" }}>
                      No news found.
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </TableContainer>
        )}
      </Container>

      {/* Confirmation Dialog */}
      <Dialog open={confirmDialog.open} onClose={closeConfirmDialog}>
        <DialogTitle sx={{ fontWeight: "bold", color: "yellow", bgcolor: "#000" }}>
          Confirm {confirmDialog.type?.toUpperCase()}
        </DialogTitle>
        <DialogContent sx={{ bgcolor: "#111", color: "white" }}>
          Are you sure you want to{" "}
          <b>{confirmDialog.type === "delete" ? "delete" : confirmDialog.type}</b>{" "}
          this news post?
        </DialogContent>
        <DialogActions sx={{ bgcolor: "#000" }}>
          <Button onClick={closeConfirmDialog} variant="outlined" sx={{ color: "yellow", borderColor: "yellow" }}>
            Cancel
          </Button>
          <Button onClick={handleConfirmAction} variant="contained" sx={{ bgcolor: "yellow", color: "black" }}>
            Confirm
          </Button>
        </DialogActions>
      </Dialog>

      {/* Snackbar Alerts */}
      <Snackbar open={newNewsAlert} autoHideDuration={3000} onClose={() => setNewNewsAlert(false)}>
        <Alert severity="info" sx={{ width: "100%" }}>
          New news item added!
        </Alert>
      </Snackbar>

      <Snackbar open={publishSuccessAlert} autoHideDuration={3000} onClose={() => setPublishSuccessAlert(false)}>
        <Alert severity="success" sx={{ width: "100%" }}>
          News published successfully!
        </Alert>
      </Snackbar>

      <Snackbar open={unpublishSuccessAlert} autoHideDuration={3000} onClose={() => setUnpublishSuccessAlert(false)}>
        <Alert severity="info" sx={{ width: "100%" }}>
          News unpublished successfully!
        </Alert>
      </Snackbar>

      <Snackbar open={deleteSuccessAlert} autoHideDuration={3000} onClose={() => setDeleteSuccessAlert(false)}>
        <Alert severity="warning" sx={{ width: "100%" }}>
          News deleted successfully!
        </Alert>
      </Snackbar>

      <Box
        component="footer"
        sx={{
          flexShrink: 0,
          py: 2,
          textAlign: "center",
          color: "gray",
          fontSize: "0.8rem",
          borderTop: "1px solid rgba(255,255,255,0.1)",
        }}
      >
        ¬© 2025 Community Portal ‚Äî Admin News Panel
      </Box>
    </Box>
  );
}


=====================================

//this is for the mobile design of news 

import React, { useState } from "react";
import {
  Paper, Box, Typography, IconButton, Collapse, Divider, Tooltip,
} from "@mui/material";
import PublishIcon from "@mui/icons-material/Publish";
import UnpublishedIcon from "@mui/icons-material/Unpublished";
import DeleteIcon from "@mui/icons-material/Delete";
import EditIcon from "@mui/icons-material/Edit";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import ExpandLessIcon from "@mui/icons-material/ExpandLess";

export default function NewsListMobile({ news, setConfirmDialog }) {
  const [expanded, setExpanded] = useState([]);

  const toggleExpand = (id) =>
    setExpanded((prev) => (prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]));

  return news.length > 0 ? (
    news.map((n) => {
      const isExpanded = expanded.includes(n.id);
      return (
        <Paper key={n.id} sx={{ p: 2, mt: 2, bgcolor: "#1a1a1a", color: "white", borderRadius: 2 }}>
          <Box display="flex" justifyContent="space-between" onClick={() => toggleExpand(n.id)}>
            <Box>
              <Typography fontWeight="bold">{n.title}</Typography>
              <Typography sx={{ color: n.status === "Published" ? "#00e676" : "#ffb74d" }}>
                {n.status}
              </Typography>
            </Box>
            <IconButton sx={{ color: "yellow" }}>
              {isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
            </IconButton>
          </Box>
          <Collapse in={isExpanded}>
            <Divider sx={{ my: 1 }} />
            <Typography variant="body2" color="gray">{n.content}</Typography>
            <Box display="flex" justifyContent="space-around" mt={1.5}>
              <Tooltip title="Edit">
                <IconButton sx={{ color: "orange" }}>
                  <EditIcon />
                </IconButton>
              </Tooltip>
              {n.status === "Published" ? (
                <Tooltip title="Unpublish">
                  <IconButton sx={{ color: "red" }} onClick={() => setConfirmDialog({ open: true, type: "unpublish", id: n.id })}>
                    <UnpublishedIcon />
                  </IconButton>
                </Tooltip>
              ) : (
                <Tooltip title="Publish">
                  <IconButton sx={{ color: "green" }} onClick={() => setConfirmDialog({ open: true, type: "publish", id: n.id })}>
                    <PublishIcon />
                  </IconButton>
                </Tooltip>
              )}
              <Tooltip title="Delete">
                <IconButton sx={{ color: "red" }} onClick={() => setConfirmDialog({ open: true, type: "delete", id: n.id })}>
                  <DeleteIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Collapse>
        </Paper>
      );
    })
  ) : (
    <Typography sx={{ color: "gray", textAlign: "center", mt: 3 }}>No news found.</Typography>
  );
}


==============================================

//this is for the manage admin reports 

// ‚úÖ All same imports as before
import React, { useState, useEffect } from "react";
import {
  Box,
  Container,
  useMediaQuery,
  Typography,
  IconButton,
  Tooltip,
} from "@mui/material";
import { useTheme } from "@mui/material/styles";
import { useNavigate } from "react-router-dom";
import HeaderBar from "../AdminManageReports/components/HeaderBar";
import FiltersBar from "../AdminManageReports/components/FiltersBar";
import ReportsTable from "../AdminManageReports/components/ReportsTable";
import ReportsMobileList from "../AdminManageReports/components/ReportsMobileList";
import PaginationBar from "../AdminManageReports/components/PaginationBar";
import FooterBar from "../AdminManageReports/components/FooterBar";

import ConfirmResolveDialog from "../AdminManageReports/dialogs/ConfirmResolveDialog";
import ConfirmDeleteDialog from "../AdminManageReports/dialogs/ConfirmDeleteDialog";
import ConfirmArchiveDialog from "../AdminManageReports/dialogs/ConfirmArchiveDialog";

import BulkResolveDialog from "../AdminManageReports/dialogs/BulkResolveDialog";
import BulkArchiveDialog from "../AdminManageReports/dialogs/BulkArchiveDialog";
import BulkDeleteDialog from "../AdminManageReports/dialogs/BulkDeleteDialog";

import AlertsGroup from "../AdminManageReports/components/AlertsGroup"; // ‚úÖ New modular alert import
import useReportsFetch from "../AdminManageReports/hooks/useReportsFetch";
import getPriorityColor from "../AdminManageReports/util/getPriorityColor";
import axios from "axios";

import CheckCircleIcon from "@mui/icons-material/CheckCircle";
import ArchiveIcon from "@mui/icons-material/Archive";
import DeleteIcon from "@mui/icons-material/Delete";
import Snackbar from "@mui/material/Snackbar";
import MuiAlert from "@mui/material/Alert";




export default function AdminManageReports() {
  const [bulkActionMessage, setBulkActionMessage] = useState("");

  const { reports, setReports, newReportAlert, setNewReportAlert } = useReportsFetch();

  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("All");
  const [expandedIds, setExpandedIds] = useState([]);
  const [resolveSuccessAlert, setResolveSuccessAlert] = useState(false);
  const [archiveSuccessAlert, setArchiveSuccessAlert] = useState(false);

  // ‚úÖ Single-action dialogs
  const [confirmDialog, setConfirmDialog] = useState({ open: false, reportIds: [] });
  const [archiveDialog, setArchiveDialog] = useState({ open: false, reportIds: [] });
  const [deleteDialog, setDeleteDialog] = useState({ open: false, reportIds: [], password: "" });

  // ‚úÖ Bulk-action dialogs
  const [bulkResolveDialog, setBulkResolveDialog] = useState({ open: false, reportIds: [] });
  const [bulkArchiveDialog, setBulkArchiveDialog] = useState({ open: false, reportIds: [] });
  const [bulkDeleteDialog, setBulkDeleteDialog] = useState({ open: false, reportIds: [] });

  // Pagination
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down("sm"));
  const navigate = useNavigate();

  // Filtering
  const filteredReports = reports.filter((r) => {
    const matchesSearch =
      r.title?.toLowerCase().includes(search.toLowerCase()) ||
      r.description?.toLowerCase().includes(search.toLowerCase());
    const matchesFilter = filter === "All" || r.status === filter;
    return matchesSearch && matchesFilter;
  });

  useEffect(() => {
    setPage(0);
  }, [search, filter]);

  // ‚úÖ Auto Refresh every 15 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      axios
        .get("http://localhost:8080/api/reports/fetch_all")
        .then((res) => setReports(res.data))
        .catch((err) => console.error("Auto-refresh failed:", err));
    }, 15000); // refresh every 15s

    return () => clearInterval(interval);
  }, [setReports]);


  const toggleExpand = (id) => {
    setExpandedIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  // Bulk selection
  const [selectedReports, setSelectedReports] = useState([]);

  const toggleSelectReport = (id) => {
    setSelectedReports((prev) =>
      prev.includes(id) ? prev.filter((r) => r !== id) : [...prev, id]
    );
  };

  const selectAllReports = (reports) => {
    if (selectedReports.length === reports.length) {
      setSelectedReports([]);
    } else {
      setSelectedReports(reports.map((r) => r.id));
    }
  };

  const clearSelection = () => setSelectedReports([]);

  // ‚úÖ Bulk action handlers
  const handleBulkResolve = () => {
    if (selectedReports.length === 0) return;
    setBulkResolveDialog({ open: true, reportIds: [...selectedReports] });
    clearSelection();
  };

  const handleBulkArchive = () => {
    if (selectedReports.length === 0) return;
    setBulkArchiveDialog({ open: true, reportIds: [...selectedReports] });
    clearSelection();
  };

  const handleBulkDelete = () => {
    if (selectedReports.length === 0) return;
    setBulkDeleteDialog({ open: true, reportIds: [...selectedReports] });
    clearSelection();
  };

  // Pagination logic
  const paginatedReports = filteredReports.slice(
    page * rowsPerPage,
    page * rowsPerPage + rowsPerPage
  );

  // ‚úÖ Close handlers for bulk dialogs
  const closeBulkResolveDialog = () => setBulkResolveDialog({ open: false, reportIds: [] });
  const closeBulkArchiveDialog = () => setBulkArchiveDialog({ open: false, reportIds: [] });
  const closeBulkDeleteDialog = () => setBulkDeleteDialog({ open: false, reportIds: [] });

  

  return (
    <Box
      sx={{
        minHeight: "100vh",
        bgcolor: isMobile ? "#0d0d0d" : "background.default",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Container maxWidth="lg" sx={{ mt: 3, mb: 4, flex: 1 }}>
        <HeaderBar navigate={navigate} isMobile={isMobile} />
        <FiltersBar search={search} setSearch={setSearch} filter={filter} setFilter={setFilter} />

        {/* ‚úÖ Status Legend */}
        <Box
          sx={{
            display: "flex",
            alignItems: "center",
            gap: 2,
            flexWrap: "wrap",
            mb: 2,
            mt: 1,
            color: "#bdbdbd",
          }}
        >
          <Typography variant="body2" sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Box sx={{ width: 14, height: 14, bgcolor: "green", borderRadius: "50%" }} />
            Resolved
          </Typography>
          <Typography variant="body2" sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Box sx={{ width: 14, height: 14, bgcolor: "gold", borderRadius: "50%" }} />
            Pending
          </Typography>
          <Typography variant="body2" sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Box sx={{ width: 14, height: 14, bgcolor: "red", borderRadius: "50%" }} />
            Urgent
          </Typography>
          <Typography variant="body2" sx={{ display: "flex", alignItems: "center", gap: 1 }}>
            <Box sx={{ width: 14, height: 14, bgcolor: "gray", borderRadius: "50%" }} />
            Archived
          </Typography>
        </Box>

        {isMobile ? (
          <ReportsMobileList
            filteredReports={paginatedReports}
            getPriorityColor={getPriorityColor}
            handleViewDetails={(id) => navigate(`/admin/reports/${id}`)}
            handleVerifySoon={(id) => navigate(`/admin/reports/verify/${id}`)}
            openConfirmResolve={(id) => setConfirmDialog({ open: true, reportIds: [id] })}
            openArchiveConfirm={(id) => setArchiveDialog({ open: true, reportIds: [id] })}
            openDeleteConfirm={(id) => setDeleteDialog({ open: true, reportIds: [id], password: "" })}
          />
        ) : (
          <ReportsTable
            reports={paginatedReports}
            handleViewDetails={(id) => navigate(`/admin/reports/${id}`)}
            openDeleteConfirm={(id) => setDeleteDialog({ open: true, reportIds: [id], password: "" })}
            openConfirmResolve={(id) => setConfirmDialog({ open: true, reportIds: [id] })}
            openArchiveConfirm={(id) => setArchiveDialog({ open: true, reportIds: [id] })}
            handleVerifySoon={(id) => navigate(`/admin/reports/verify/${id}`)}
            getPriorityColor={getPriorityColor}
            selectedReports={selectedReports}
            toggleSelectReport={toggleSelectReport}
            selectAllReports={selectAllReports}
          />
        )}

        {/* ‚úÖ Bulk Actions Bar */}
        {selectedReports.length > 0 && (
          <Box
            sx={{
              bgcolor: "#000",
              borderTop: "1px solid rgba(255,255,0,0.2)",
              color: "yellow",
              display: "flex",
              alignItems: "center",
              justifyContent: "space-between",
              px: 3,
              py: 1.5,
              borderRadius: "0 0 12px 12px",
              mt: -1,
            }}
          >
            <Typography sx={{ fontWeight: "bold" }}>
              {selectedReports.length} selected
            </Typography>

            <Box sx={{ display: "flex", gap: 1 }}>
              <Tooltip title="Resolve Selected">
                <IconButton sx={{ color: "green" }} onClick={handleBulkResolve}>
                  <CheckCircleIcon />
                </IconButton>
              </Tooltip>

              <Tooltip title="Archive Selected">
                <IconButton sx={{ color: "#ffeb3b" }} onClick={handleBulkArchive}>
                  <ArchiveIcon />
                </IconButton>
              </Tooltip>

              <Tooltip title="Delete Selected">
                <IconButton sx={{ color: "red" }} onClick={handleBulkDelete}>
                  <DeleteIcon />
                </IconButton>
              </Tooltip>
            </Box>
          </Box>
        )}

        {!isMobile && (
          <PaginationBar
            filteredReports={filteredReports}
            rowsPerPage={rowsPerPage}
            setRowsPerPage={setRowsPerPage}
            page={page}
            setPage={setPage}
          />
        )}
      </Container>

      {/* ‚úÖ Dialogs */}
      <ConfirmResolveDialog
        confirmDialog={confirmDialog}
        closeConfirmDialog={() => setConfirmDialog({ open: false, reportIds: [] })}
        setReports={setReports}
        setResolveSuccessAlert={setResolveSuccessAlert}
      />

      <ConfirmDeleteDialog
        deleteDialog={deleteDialog}
        setDeleteDialog={setDeleteDialog}
        setReports={setReports}
      />

      <ConfirmArchiveDialog
        archiveDialog={archiveDialog}
        closeArchiveDialog={() => setArchiveDialog({ open: false, reportIds: [] })}
        setReports={setReports}
        setArchiveSuccessAlert={setArchiveSuccessAlert}
      />

      <BulkResolveDialog
        bulkResolveDialog={bulkResolveDialog}
        closeBulkResolveDialog={closeBulkResolveDialog}
        setReports={setReports}
        setResolveSuccessAlert={setResolveSuccessAlert}
      />

      <BulkArchiveDialog
        bulkArchiveDialog={bulkArchiveDialog}
        closeBulkArchiveDialog={closeBulkArchiveDialog}
        setReports={setReports}
        setArchiveSuccessAlert={setArchiveSuccessAlert}
      />

      <BulkDeleteDialog
        bulkDeleteDialog={bulkDeleteDialog}
        closeBulkDeleteDialog={closeBulkDeleteDialog}
        setReports={setReports}
      />

      {/* ‚úÖ Modular Alerts */}
      <AlertsGroup
        newReportAlert={newReportAlert}
        setNewReportAlert={setNewReportAlert}
        resolveSuccessAlert={resolveSuccessAlert}
        setResolveSuccessAlert={setResolveSuccessAlert}
        archiveSuccessAlert={archiveSuccessAlert}
        setArchiveSuccessAlert={setArchiveSuccessAlert}
      />

      <FooterBar />
    </Box>
  );
}



