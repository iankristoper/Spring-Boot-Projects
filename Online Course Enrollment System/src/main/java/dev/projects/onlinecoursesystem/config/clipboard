    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        
        http.authorizeHttpRequests(auth -> auth
                .requestMatchers("/hello").permitAll()
                .anyRequest().authenticated()
            )
            .formLogin(Customizer.withDefaults())
            .logout(Customizer.withDefaults());

        return http.build();
    }
    
    
    @Bean
    public UserDetailsService userDetailsService() {
        
        //create user with username and password 
        UserDetails user = User.withUsername("Ian")
                .password(passwordEncoder().encode("testing"))
                .roles("USER")
                .build();
        
        return new InMemoryUserDetailsManager(user);    //pass this object -> new inmemory instance
    }
    
    
    @Bean 
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }



    @Bean 
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        
        http.authorizeHttpRequests(auth -> auth
                .requestMatchers("/testing").permitAll()
                .anyRequest().authenticated())
                
            .formLogin(Customizer.withDefaults())
            .logout(Customizer.withDefaults());
        
        return http.build();            
    }
    
    
    @Bean 
    public UserDetailsService userDetailsService() {
        
        UserDetails user = User.withUsername("Ian").password(passwordEncoder().encode("hello")).roles("USER").build();
        
        return new InMemoryUserDetailsManager(user);
    }
    
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }




    //controller to model -> db
    public Student convertToModel(StudentDTO dto) {
        
        Student student = new Student();
        
        student.setFirstName(dto.getFirstName());
        student.setLastName(dto.getLastName());
        student.setEmail(dto.getEmail());
        student.setPassword(passwordEncoder.encode(dto.getPassword()));
        student.setRole("ROLE_STUDENT");
        
        return student;
    }


@EnableWebSecurity
@Configuration
public class SecurityConfig {
    
    @Autowired
    private DataSource datasource;
    
    @Bean 
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        
        http
                .csrf(csrf -> csrf.disable()) // ✅ new preferred style
                .authorizeHttpRequests(auth -> auth
                    .requestMatchers("/auth/**", "/testing").permitAll()
                    .anyRequest().authenticated()
                )
                
            .formLogin(Customizer.withDefaults())
            .logout(Customizer.withDefaults());
        
        return http.build();            
    }
    
    
    @Bean 
    public UserDetailsService userDetailsService() {
        
        JdbcUserDetailsManager userDetailsManager = new JdbcUserDetailsManager(datasource);
        
        
        //tell it how to query the students table for user and roles
        String query1 = "SELECT email AS username, password, true AS enabled FROM students WHERE email = ?";
        userDetailsManager.setUsersByUsernameQuery(query1);
        
        String query2 = "SELECT email AS username, role AS authority FROM students WHERE email = ?";
        userDetailsManager.setAuthoritiesByUsernameQuery(query2);
        
        
        return userDetailsManager;
    }
    
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    

}







// 🔍 Debug print: Confirm incoming data from Postman
        System.out.println("🎯 First name = " + studentDTO.getFirstName());
        System.out.println("🎯 Last name = " + studentDTO.getLastName());
        System.out.println("🎯 Email = " + studentDTO.getEmail());
        System.out.println("🎯 Password = " + studentDTO.getPassword());
        System.out.println("🎯 Role = " + studentDTO.getRole());
